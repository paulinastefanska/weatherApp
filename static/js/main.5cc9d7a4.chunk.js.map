{"version":3,"sources":["components/Form.js","components/Result.js","App.js","index.js"],"names":["Form","props","onSubmit","submit","type","value","onChange","change","placeholder","Result","weather","date","icon","city","sunrise","sunset","temp","pressure","wind","err","content","sunriseTime","Date","toLocaleTimeString","sunsetTime","className","src","alt","APIkey","App","state","handleInputChange","e","setState","target","handleCitySubmint","preventDefault","API","fetch","then","response","ok","Error","json","result","time","toLocaleString","prevState","sys","Math","floor","main","speed","catch","this","Component","ReactDOM","render","document","getElementById"],"mappings":"yTAiBeA,G,MAdF,SAAAC,GACX,OACE,0BAAMC,SAAUD,EAAME,QACpB,2BACEC,KAAK,OACLC,MAAOJ,EAAMI,MACbC,SAAUL,EAAMM,OAChBC,YAAY,iBAEd,6CCkDSC,G,MA3DA,SAAAR,GAAU,IAAD,EAWlBA,EAAMS,QATRC,EAFoB,EAEpBA,KACAC,EAHoB,EAGpBA,KACAC,EAJoB,EAIpBA,KACAC,EALoB,EAKpBA,QACAC,EANoB,EAMpBA,OACAC,EAPoB,EAOpBA,KACAC,EARoB,EAQpBA,SACAC,EAToB,EASpBA,KACAC,EAVoB,EAUpBA,IAGEC,EAAU,KAEd,IAAKD,GAAON,EAAM,CAChB,IAAMQ,EAAc,IAAIC,KAAe,IAAVR,GAAgBS,qBACvCC,EAAa,IAAIF,KAAc,IAATP,GAAeQ,qBAE3CH,EACE,yBAAKK,UAAU,WACb,yBAAKA,UAAU,gBACb,2BACE,gCAASd,IAEX,uBAAGc,UAAU,gBACX,gCAASZ,KAGb,yBAAKY,UAAU,mBACb,yBACEC,IAAG,0CAAqCd,EAArC,QACHe,IAAI,gBAEN,0BAAMF,UAAU,gBACd,gCAAST,EAAT,UAEF,+CACgB,gCAASK,IAEzB,8CACe,gCAASG,IAExB,2CACY,gCAASP,EAAT,SAEZ,uCACQ,gCAASC,EAAT,WAOhB,OACE,oCAAGC,EAAG,gCAA4BN,EAA5B,uBAAwDO,KCpD5DQ,G,MAAS,oCA0EAC,E,2MAvEbC,MAAQ,CACNzB,MAAO,GACPM,KAAM,GACNE,KAAM,GACND,KAAM,GACNE,QAAS,GACTC,OAAQ,GACRC,KAAM,GACNC,SAAU,GACVC,KAAM,GACNC,KAAK,G,EAGPY,kBAAoB,SAAAC,GAClB,EAAKC,SAAS,CACZ5B,MAAO2B,EAAEE,OAAO7B,S,EAIpB8B,kBAAoB,SAAAH,GAElB,GADAA,EAAEI,iBACuB,KAArB,EAAKN,MAAMzB,MAAc,CAC3B,IAAMgC,EAAG,2DAAuD,EAAKP,MAAMzB,MAAlE,kBAAiFuB,EAAjF,iBAETU,MAAMD,GACHE,MAAK,SAAAC,GACJ,GAAIA,EAASC,GACX,OAAOD,EAET,MAAME,MAAM,mCAEbH,MAAK,SAAAC,GAAQ,OAAIA,EAASG,UAC1BJ,MAAK,SAAAK,GACJ,IAAMC,GAAO,IAAIvB,MAAOwB,iBAExB,EAAKb,UAAS,SAAAc,GAAS,MAAK,CAC1BpC,KAAMkC,EACNhC,KAAMkC,EAAU1C,MAChBO,KAAMgC,EAAOlC,QAAQ,GAAGE,KACxBE,QAAS8B,EAAOI,IAAIlC,QACpBC,OAAQ6B,EAAOI,IAAIjC,OACnBC,KAAMiC,KAAKC,MAAMN,EAAOO,KAAKnC,MAC7BC,SAAU2B,EAAOO,KAAKlC,SACtBC,KAAM0B,EAAO1B,KAAKkC,MAClBjC,KAAK,SAGRkC,OAAM,SAAAlC,GACL,EAAKc,UAAS,SAAAc,GAAS,MAAK,CAC1B5B,KAAK,EACLN,KAAMkC,EAAU1C,e,wEAOxB,OACE,yBAAKoB,UAAU,OACb,2CACA,kBAAC,EAAD,CACEpB,MAAOiD,KAAKxB,MAAMzB,MAClBE,OAAQ+C,KAAKvB,kBACb5B,OAAQmD,KAAKnB,oBAEf,kBAAC,EAAD,CAAQzB,QAAS4C,KAAKxB,a,GAlEZyB,aCHlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.5cc9d7a4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Form.scss\";\r\n\r\nconst Form = props => {\r\n  return (\r\n    <form onSubmit={props.submit}>\r\n      <input\r\n        type=\"text\"\r\n        value={props.value}\r\n        onChange={props.change}\r\n        placeholder=\"City name...\"\r\n      />\r\n      <button>Search</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport \"./Result.scss\";\r\n\r\nconst Result = props => {\r\n  const {\r\n    date,\r\n    icon,\r\n    city,\r\n    sunrise,\r\n    sunset,\r\n    temp,\r\n    pressure,\r\n    wind,\r\n    err\r\n  } = props.weather;\r\n\r\n  let content = null;\r\n\r\n  if (!err && city) {\r\n    const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString();\r\n    const sunsetTime = new Date(sunset * 1000).toLocaleTimeString();\r\n\r\n    content = (\r\n      <div className=\"content\">\r\n        <div className=\"content-info\">\r\n          <p>\r\n            <strong>{date}</strong>\r\n          </p>\r\n          <p className=\"content-city\">\r\n            <strong>{city}</strong>\r\n          </p>\r\n        </div>\r\n        <div className=\"content-weather\">\r\n          <img\r\n            src={`http://openweathermap.org/img/w/${icon}.png`}\r\n            alt=\"weather-img\"\r\n          />\r\n          <span className=\"content-temp\">\r\n            <strong>{temp}&deg;C</strong>\r\n          </span>\r\n          <span>\r\n            Sunrise time: <strong>{sunriseTime}</strong>\r\n          </span>\r\n          <span>\r\n            Sunset time: <strong>{sunsetTime}</strong>\r\n          </span>\r\n          <span>\r\n            Pressure: <strong>{pressure} hPa</strong>\r\n          </span>\r\n          <span>\r\n            Wind: <strong>{wind} m/s</strong>\r\n          </span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>{err ? `Sorry, we do not have ${city} in the database...` : content}</>\r\n  );\r\n};\r\n\r\nexport default Result;\r\n","import React, { Component } from \"react\";\n\nimport Form from \"./components/Form\";\nimport Result from \"./components/Result\";\nimport \"./App.scss\";\n\nconst APIkey = \"f262281ecaf37255968f7b381035a318\";\n\nclass App extends Component {\n  state = {\n    value: \"\",\n    date: \"\",\n    city: \"\",\n    icon: \"\",\n    sunrise: \"\",\n    sunset: \"\",\n    temp: \"\",\n    pressure: \"\",\n    wind: \"\",\n    err: false\n  };\n\n  handleInputChange = e => {\n    this.setState({\n      value: e.target.value\n    });\n  };\n\n  handleCitySubmint = e => {\n    e.preventDefault();\n    if (this.state.value !== \"\") {\n      const API = `http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=${APIkey}&units=metric`;\n\n      fetch(API)\n        .then(response => {\n          if (response.ok) {\n            return response;\n          }\n          throw Error(\"Oops... something went wrong\");\n        })\n        .then(response => response.json())\n        .then(result => {\n          const time = new Date().toLocaleString();\n\n          this.setState(prevState => ({\n            date: time,\n            city: prevState.value,\n            icon: result.weather[0].icon,\n            sunrise: result.sys.sunrise,\n            sunset: result.sys.sunset,\n            temp: Math.floor(result.main.temp),\n            pressure: result.main.pressure,\n            wind: result.wind.speed,\n            err: false\n          }));\n        })\n        .catch(err => {\n          this.setState(prevState => ({\n            err: true,\n            city: prevState.value\n          }));\n        });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Weather App</h1>\n        <Form\n          value={this.state.value}\n          change={this.handleInputChange}\n          submit={this.handleCitySubmint}\n        />\n        <Result weather={this.state} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}